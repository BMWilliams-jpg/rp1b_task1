#counting DNA nucleotides

class DNAString(str):
    def seq(self, s):
        return str.seq(self, s.strip().upper())
    
    def __init__(self, _):
        self.num_A = self.count("A")
        self.num_T = self.count("T")
        self.num_G = self.count("G")
        self.num_C = self.count("C")

    def stats(self):
        return self.num_A, self.num_C, self.num_G, self.num_T

dna = ("GATGTTGAGTCAATTGTATTTCAGCGTAGCTTTAGTGCTTCTCTAGAGCGTGACGTAATGAAATCCTGATGTAATGGCACACTCGAAACTGCCAATTAACAAAGCGTTAGTTACAGAGATTACAGGAAGGCTGCGTTGAATCTAGGTTGGATCTGTGAAGCAAATGTTCTAGGACTTCTGGCATAACGCTTACACGGGGTGGCTCTACACAGCAACAGACTAGTACCGGTGTATAGTGGCGTAGCGGCCCAACAAGTTGATCACTTGAGCAGTTCAGGCAAGGCTTTCATAATGGGAGAATAATCTAGCTCTGTATGCGGACAGAACGGCTCGAGGGGTCCTATTTTACCCGAATCATACTCTCAGAGTATTTAGGCAGATCTCGTTGAGGAGCAAACTATTAAATCTAGTAGTAAGAACGGCAGAAATCGGATTGGGTTTTGCATCTCTCAGCTGCATTGTTCGCGTACAGCGTGGCTCAAAAGCCTCAACTAAGTGTTCTATATCGTAAGTAGCTCAATGGCATAGAAAAGACCGACCATACGGGTTGTGGGCCTTCAGACTTTTTCAACATGCGTGTGCACAGCGCACCGCATGGCGCCTGGTAGCACGTCACTGGAAGGTCCCGTACCTGCCGGGAATTCACTGCACGACTATCACATAAATTACGATTTCAGACGTTCGTCTGTATTGTAGGCACAGAGTCGGCCATCCTAGTGGGACCAGTTCGAGGGGTGCACTCGACATACCAGACTCTATACATGAGCTGAGTGTATTTCGTTGGGAATACTACGAGGGTAATCATGAAAGTCCGTCTTTTTGCTGATGTGAATGGACTGTTGAAAAAGAGTAGGGTAAGATAAAAACTCGCGTGCCGGCACTCGGTAGTATGCCTCGCGGGACGATACTTTGACGTTATTCAGATATGGCACCAGACTGTCAGGCGTTGCGTAAGGGAGCATCTAAGAAACGGTACGAAAATCA")
d = DNAString(dna)

print(d)
print(d.stats())



#Transcribing DNA into RNA

def dna_to_rna(dna):
    rna = " "
    dna = ("GAGAAGTCAACAAAGGTAACAGCCATCTGCAATTCAACCAGCGAAACGTATCATTGAACTGCACAAAAAACGTCCCTAAGCAGACGCCGTCGGCGCGGCGTTGTATGTTATATGGCATATTTCTTTCGAATTCGGGTGAATTAAAACCCTCTCATGGGCGTCGAGACCCTGACTCCGATCAAACGTACAGAACTATATAATGTTGGTCTGAGATCGAATTGACCCAATCGAAGGGACGAGCTTTGCTGACGCTTAAATTTATAGCTGCAATGGTTGCGGTTGACCCATATAAGCTCCGGCAACCCAGCTATCGCATGGTTCCACGGGTGGGTTGGCCCGGAGCGACTCAAACTAGACGTAGTATTTTGGCCCACTAGACCAGAAGGTACTAAGCTGACTTCTAAGACAGCACCGAGCTTCCGAATTGTGTCGTAAAGTTGCATGATAGGGTCGTATGGTCGTCGCAACACCGCCGTTAAGTGCTTTGACTTTCTCCGCTGTTGGACTAGGAATGCGGACGTATTGGGCACCGTCCTACTAAAGGCCTTTACATCCGCTCCCCTGCGTTTCTCTATTACGAGTTTTCTGCTTCCGCCGTATAACCGACGTTCGTCATAGTCGACGTTACGCCCGAGGTGGCAAGGACACTGGACAGATCTATTCTGACGAGGCAACCCGGACCCGTGTGTTTAGAGACCCGTGAAGGCGTACGGTTGTTAAGTGTGAATCTAATCGGCCCATATTCTAATGCCAGGGGAATTCCTTCAGCCATAAAGTGCACTTGAGCAAGAGGCTTTCGTTATACGCGTTAGTGTGTCACAATCGCAAAATGTTCGGAAGCTCCAGTCCCGGAGTTTCTTTCTGGCTTCATCACCTGAAGGGCGGCCCTTCTACCTTGCTCCATGTAAAAACCTCTCTAACAGAGTCCCACTTACTAGCTACATGGATCGGTAGGGGACCCTTAGGGGGCTTGGAGTAGCACCGCTGGGATAC")
    for X in dna:
        if X == 'T':
            rna += 'U'
        else :
            rna += X
    return rna 
print(dna_to_rna('ACGT'))
    

#Counting Point Mutations, Hamming Distance

str1 = ("GAGCCTACTAACGGGAT")
str2 = ("CATCGTAATGACGGCCT")

raw_data = (str1, str2)

mutations = 0
for i in range(len(raw_data[0])):
    if str1[i] != str2[i]:
        mutations += 1

print (mutations)


#complementing a strand of DNA


from Bio.Seq import Seq

seq = Seq("TCGCCAAGGGTAAAAACACACGCGGGCCCGACACACTCTGTTTTAGTAGAATGATTAATGCGATGATTCCCACGCAGATTCAGCGGGGGCCATACAAGTTGGGATTAGTAAGCCAGCTGCGTCTTACTAATTCGCATAACGAGCAGTGCTTGCTTCGGGTCCGCGGTCGCTCACACACAACGTGGACGATGCGTCTATCTACTGGGGGTGTACGGGTCATTACAAGCAAGTTTGTCCCTGGGTTCTGAGCTCGCATTCCCGGTGGATCTTGGTAGTTGCGCCCGTGTTCGCACGGCCTTGTGCGCCCTGTTCTGAACTGAGAAAAGCCGTAGCGGAGTATTCCTCAGGCCAATTTTGCCTTCGCCCTCACAGACTAACAAGGGTTTGACGTTACAGCGCGCTTATGACCTTCGTATATCTGGCCATCCTTACGTCTGACTTAAGAATGGGACACCAAAGGCTTAAACGGAGAGGCGTCTTTACAAGGGGGATCTGTACAGTTGAAGCTGGTTGATCAGCCCCGCCTTCTTTGCCCGCAATGAACTATAAAACTTCCCATCTCCCAGAGACATACGAGTTTTGCGAAATTACAGTTCGGTAGCAAATTGACTTTAACTAGCACGGGAGTTTATTAACCCGTTAGTGCACTGCAGACCGGCTAGTTTGGGGCATCCGTTGCACGAACTGGCAAAACGGCCACGCCAGGAACCCAGGTGCAGAGGTCGAACGCAGTCAGTTAGTATTTCCATCTGCTCCACAGTGATTCTTAATGTAGGTCCCGTACACGTCGCTTGGGCGCGAGATGAAGTAGCTTCTGACGTTATAGGTGTCTGCTCCCATCTCCTGTTCGGGCGCATAACCGCATATTACACCGTGCATACATAGAGGTCGAGGGAGCCGCTACGATGCGTCCCCCCGTGGCTCGTTGCAGTCGTTAGGCAGATGCTGATGTACGTGGACGATTATGGGTC")

print (seq.reverse_complement())


